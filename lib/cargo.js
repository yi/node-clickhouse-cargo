// Generated by CoffeeScript 2.5.1
(function() {
  var Bulk, Cargo, FOLDER_PREFIX, debuglog, fs, os, path;

  fs = require("fs");

  os = require("os");

  path = require("path");

  debuglog = require("debug")("chcargo:cargo");

  Bulk = require("./bulk");

  FOLDER_PREFIX = "clichouse-cargo-";

  Cargo = class Cargo {
    toString() {
      return `[Cargo ${this.id}@${this.workingPath}]`;
    }

    constructor(clichouseClient, statement, bulkTTL) {
      this.clichouseClient = clichouseClient;
      this.statement = statement;
      this.bulkTTL = bulkTTL;
      debuglog(`[new Cargo] @statement:${this.statement}, @bulkTTL:${this.bulkTTL}`);
      this.id = Date.now().toString(36);
      this.count = 0;
      this.workingPath = fs.mkdtempSync(path.join(os.tmpdir(), FOLDER_PREFIX));
      this.curBulk = null;
      this.bulks = [];
      this.moveToNextBulk();
      return;
    }

    setBulkTTL(val) {
      return this.bulkTTL = val;
    }

    moveToNextBulk() {
      if (this.curBulk) {
        this.bulks.push(this.curBulk);
      }
      this.curBulk = new Bulk(this.clichouseClient, this.workingPath);
      this.curBulk.expire(this.bulkTTL);
    }

    // routine to exame each bulk belongs to this cargo
    exam() {
      var bulk, bulksToRemove, i, j, len, len1, pos, ref;
      debuglog(`${this} [exam]`);
      if (this.curBulk) {
        if (this.curBulk.isEmpty()) {
          // lazy: keep ttl when bulk is empty
          this.curBulk.expire(this.bulkTTL);
        } else if (this.curBulk.isExpired()) {
          this.moveToNextBulk();
        }
      }
      bulksToRemove = [];
      ref = this.bulks;
      for (i = 0, len = ref.length; i < len; i++) {
        bulk = ref[i];
        if (bulk.isCommitted()) {
          bulksToRemove.push(bulk);
        } else {
          bulk.commit();
        }
      }
      for (j = 0, len1 = bulksToRemove.length; j < len1; j++) {
        bulk = bulksToRemove[j];
        pos = this.bulks.indexOf(bulk);
        if (pos >= 0) {
          this.bulks.splice(pos, 1);
        }
      }
    }

    push() {
      this.curBulk.push(Array.from(arguments));
      return ++this.count;
    }

  };

  module.exports = Cargo;

}).call(this);
