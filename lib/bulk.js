// Generated by CoffeeScript 2.5.1
(function() {
  var Bulk, StaticCountWithProcess, cluster, debuglog, fs, path, toSQLDateString;

  cluster = require('cluster');

  path = require("path");

  fs = require("fs");

  debuglog = require("debug")("chcargo:bulk");

  StaticCountWithProcess = 0;

  toSQLDateString = function(date) {
    return date.getUTCFullYear() + '-' + ('00' + (date.getUTCMonth() + 1)).slice(-2) + '-' + ('00' + date.getUTCDate()).slice(-2) + ' ' + ('00' + date.getUTCHours()).slice(-2) + ':' + ('00' + date.getUTCMinutes()).slice(-2) + ':' + ('00' + date.getUTCSeconds()).slice(-2);
  };

  Bulk = class Bulk {
    toString() {
      return `[Bulk ${this.id}@${this.pathToFile}]`;
    }

    constructor(clichouseClient, workingPath) {
      this.clichouseClient = clichouseClient;
      this.id = Date.now().toString(36) + `_${++StaticCountWithProcess}`;
      if (cluster.isWorker) {
        // when launch as a worker by pm2
        this.id += `_${cluster.worker.id}`;
      }
      this.count = 0;
      this.pathToFile = path.join(workingPath, `bulk-${this.id}`);
      this.outputStream = fs.createWriteStream(this.pathToFile, {
        flags: 'a'
      });
      // make sure writableStream is working
      this.outputStream.write("");
      this._committed = false;
      this._committing = false;
      return;
    }

    push(arr) {
      var i, item, j, len, line;
      if (!(Array.isArray(arr) && (arr.length > 0))) {
        debuglog(`${this} [push] empty arr`);
        return;
      }
      for (i = j = 0, len = arr.length; j < len; i = ++j) {
        item = arr[i];
        if (item instanceof Date) {
          item[i] = toSQLDateString(item);
        }
      }
      line = JSON.stringify(arr) + "\n";
      debuglog(`${this} [push] line:`, line);
      this.outputStream.write(line);
    }

    // set the expiration of this bulk
    expire(ttl) {
      debuglog(`${this} [expire] ttl:${ttl}`);
      ttl = parseInt(ttl) || 0;
      if (ttl < 1000) {
        ttl = 1000;
      }
      this.expireAt = Date.now() + ttl;
    }

    commit() {
      if (this._committing) {
        return;
      }
    }

    isExpired() {
      return (parseInt(this.expireAt) || 0) <= Date.now();
    }

    isEmpty() {
      return this.count === 0;
    }

    isCommitted() {
      return this._committed === true;
    }

  };

  module.exports = Bulk;

}).call(this);
