// Generated by CoffeeScript 2.5.1
(function() {
  var NUM_OF_LINE, STATEMENT_CREATE_TABLE, STATEMENT_DROP_TABLE, STATEMENT_INSERT, TABLE_NAME, assert, createCargo, fs, getClickHouseClient, isInited;

  ({createCargo, isInited, getClickHouseClient} = require("../"));

  assert = require("assert");

  fs = require("fs");

  TABLE_NAME = `cargo_test.unittest03_${Date.now().toString(36)}`;

  STATEMENT_CREATE_TABLE = `CREATE TABLE IF NOT EXISTS ${TABLE_NAME}
(
  \`time\` DateTime ,
  \`step\`  UInt32,
  \`pos_id\` String DEFAULT ''
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(time)
ORDER BY (time, step)
TTL time + INTERVAL 1 DAY DELETE
SETTINGS index_granularity = 8192;`;

  STATEMENT_CREATE_TABLE = STATEMENT_CREATE_TABLE.replace(/\n|\r/g, ' ');

  STATEMENT_INSERT = `INSERT INTO ${TABLE_NAME} FORMAT JSONCompactEachRow`;

  STATEMENT_DROP_TABLE = `DROP TABLE ${TABLE_NAME}`;

  NUM_OF_LINE = 2789; // NOTE: bulk flushs every 100 lines

  describe("commit bulk", function() {
    var theBulk, theCargo;
    this.timeout(60000);
    theCargo = null;
    theBulk = null;
    before(function(done) {
      theCargo = createCargo(STATEMENT_INSERT);
      theBulk = theCargo.curBulk;
      getClickHouseClient().query(STATEMENT_CREATE_TABLE, done);
    });
    after(function(done) {
      process.exit();
      done();
    });
    it("push to cargo", function(done) {
      var i, j, ref;
      for (i = j = 0, ref = NUM_OF_LINE; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        theCargo.push(new Date(), i, "string");
      }
      setTimeout(done, 6000); // wait file stream flush
    });
    it("bulk should committed", function(done) {
      var curBulk;
      assert(theBulk.isCommitted(), "the bulk should committed");
      curBulk = theCargo.curBulk;
      assert(curBulk !== theBulk, "previouse bulk should not be the current bulk");
      assert(theCargo.getRetiredBulks().length === 0, "committed bulks should be cleared");
      done();
    });
    it("records should be written into remote ClickHouse server", function(done) {
      var rows, stream;
      stream = getClickHouseClient().query(`SELECT * FROM ${TABLE_NAME} LIMIT 10000000 FORMAT JSONCompactEachRow`);
      rows = [];
      stream.on('data', function(row) {
        return rows.push(JSON.parse(row));
      });
      stream.on('end', function() {
        var j, len, row;
        assert(rows.length === NUM_OF_LINE);
        rows.sort(function(a, b) {
          return a[1] - b[1];
        });
        for (j = 0, len = rows.length; j < len; j++) {
          row = rows[j];
          assert(row[1] === i, "unmatching field 1 ");
          assert(row[2] === "string", "unmatching field 2 ");
        }
        done();
      });
    });
  });

}).call(this);
