// Generated by CoffeeScript 2.5.1
(function() {
  var INIT_OPTION, QUERY, QUERY1, assert, createCargo, init, isInited;

  ({createCargo, isInited, init} = require("../"));

  assert = require("assert");

  INIT_OPTION = {
    host: "localhost",
    maxTime: 2000,
    maxRows: 100,
    commitInterval: 3000
  };

  QUERY = "INSERT INTO test.cargo0 FORMAT JSONCompactEachRow";

  QUERY1 = "INSERT INTO test.cargo1 FORMAT JSONCompactEachRow";

  describe("init clickhouse_cargo", function() {
    var cargo0;
    cargo0 = null;
    //before (done)->
    //init(INIT_OPTION)
    //done()
    //return
    it("auto init when env set", function(done) {
      assert(isInited(), "should auto init when env set");
      done();
    });
    it("cargo must be created with an insert statement", function(done) {
      assert.throws((function() {
        return createCargo();
      }), Error, /blank/);
      assert.throws((function() {
        return createCargo("select * from dual");
      }), Error, /insert/);
      cargo0 = createCargo(QUERY);
      //console.log cargo0
      assert(cargo0);
      assert(cargo0.id, "bad cargo0.id");
      assert(cargo0.maxTime === INIT_OPTION.maxTime, `bad cargo0.maxTime:${cargo0.maxTime} => ${INIT_OPTION.maxTime}`);
      assert(cargo0.maxRows === INIT_OPTION.maxRows, "bad cargo0.maxRows");
      assert(cargo0.commitInterval === INIT_OPTION.commitInterval, "bad cargo0.commitInterval");
      done();
    });
    it("create multiple cargoes with the same statement should result in one shared cargo", function(done) {
      var cargo1, cargo2, cargo3, cargo4;
      cargo1 = createCargo(QUERY);
      cargo2 = createCargo(QUERY);
      cargo3 = createCargo(QUERY);
      assert(((cargo0 === cargo1 && cargo1 === cargo2) && cargo2 === cargo3));
      cargo4 = createCargo(QUERY1);
      assert(cargo4 !== cargo3);
      done();
    });
  });

}).call(this);
