// Generated by CoffeeScript 2.5.1
(function() {
  var NUM_OF_LINE, QUERY, assert, createCargo, fs, isInited;

  ({createCargo, isInited} = require("../"));

  assert = require("assert");

  fs = require("fs");

  QUERY = "INSERT INTO test.cargo0 FORMAT JSONCompactEachRow";

  //NUM_OF_LINE = 80
  NUM_OF_LINE = 100; // NOTE: bulk flushs every 100 lines

  describe("push log to cargo", function() {
    var theBulk, theCargo, theFilepath;
    this.timeout(5000);
    theCargo = null;
    theBulk = null;
    theFilepath = null;
    before(function(done) {
      theCargo = createCargo(QUERY, 999000);
      theBulk = theCargo.curBulk;
      theFilepath = theBulk.pathToFile;
      done();
    });
    after(function(done) {
      process.exit();
      done();
    });
    it("push to cargo", function(done) {
      var i, j, ref;
      for (i = j = 0, ref = NUM_OF_LINE; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        theCargo.push(new Date(), i, "string");
      }
      assert(fs.existsSync(theFilepath), `log file not exist on ${theFilepath}`);
      setTimeout(done, 2000); // wait file stream flush
    });
    return it("exam content written on hd file", function(done) {
      var contentInHD, contentInHDArr, i, j, len, line;
      contentInHD = fs.readFileSync(theFilepath, 'utf8');
      contentInHDArr = contentInHD.split(/\r|\n|\r\n/);
      console.log("[exam hd content] contentInHDArr:", contentInHDArr.length);
      assert(contentInHDArr.length === NUM_OF_LINE, "unmatching output length");
      for (i = j = 0, len = contentInHDArr.length; j < len; i = ++j) {
        line = contentInHDArr[i];
        line = JSON.parse(line);
        //console.log line
        assert(line[1] === i, "unmatching field 1 ");
        assert(line[2] === "string", "unmatching field 2 ");
      }
      done();
    });
  });

}).call(this);
