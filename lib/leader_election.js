// Generated by CoffeeScript 2.5.1
(function() {
  // when in cluster worker mode, elect a leader for each cargo
  var NOOP, SERVICE_TYPE, assert, bonjour, cluster, debuglog, electSelfToALeader, getLocalIPAddress;

  bonjour = require('bonjour')();

  assert = require("assert");

  cluster = require('cluster');

  debuglog = require("debug")("chcargo:leader_election");

  NOOP = function() {};

  SERVICE_TYPE = "clickhouse-cargo";

  // https://stackoverflow.com/a/15075395/305945
  getLocalIPAddress = function() {
    var alias, devName, i, iface, interfaces;
    interfaces = require('os').networkInterfaces();
    for (devName in interfaces) {
      iface = interfaces[devName];
      i = 0;
      while (i < iface.length) {
        alias = iface[i];
        if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
          return alias.address;
        }
        i++;
      }
    }
    return '0.0.0.0';
  };

  electSelfToALeader = function(cargoId, callbak = NOOP) {
    var acknowledagedServices, commonOptions, detect, options;
    cargoId = String(cargoId || '').trim();
    assert(cargoId, "missing cargoId");
    if (cluster.isMaster && Object.keys(cluster.workers).length === 0) {
      debuglog("[electSelfToALeader] single process leader");
      callbak();
      return;
    }
    commonOptions = {
      //host : getLocalIPAddress()
      protocol: 'udp',
      type: SERVICE_TYPE + cargoId,
      port: 17888
    };
    //options = Object.assign(txt : workerId : cluster.worker.id, commonOptions)
    options = Object.assign({
      name: String(cluster.worker.id)
    }, commonOptions);
    debuglog("[electSelfToALeader] options:", options);
    bonjour.publish(options);
    acknowledagedServices = [];
    bonjour.find(commonOptions, function(service) {
      debuglog(`[electSelfToALeader@${cluster.worker.id}] add service:`, service);
      acknowledagedServices.push(service);
    });
    detect = function() {
      debuglog(`[electSelfToALeader@${cluster.worker.id} > detect] acknowledagedServices:`);
      console.dir(acknowledagedServices, {
        depth: 10
      });
    };
    //detect = ->
    //debuglog "[electSelfToALeader > detect]"
    //bonjour.find commonOptions, (services)->
    //debuglog "[electSelfToALeader > find] services"
    //console.dir(services, depth:10)

    //debuglog "[electSelfToALeader] services"
    //return
    //return
    setTimeout(detect, 60000);
  };

  module.exports = {
    electSelfToALeader: electSelfToALeader
  };

}).call(this);
