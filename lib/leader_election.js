// Generated by CoffeeScript 2.5.1
(function() {
  // when in cluster worker mode, elect a leader for each cargo to avoid race condition when restoring existing bulks
  var CargoIdToLeadWorkerId, NOOP, SERVICE_HOST, SERVICE_PORT, SERVICE_TYPE, UDPSock, assert, cluster, debuglog, dgram, electSelfToALeader, initUDPSock;

  assert = require("assert");

  cluster = require('cluster');

  debuglog = require("debug")("chcargo:leader_election");

  dgram = require('dgram');

  NOOP = function() {};

  SERVICE_TYPE = "clickhouse-cargo";

  SERVICE_PORT = 17888;

  SERVICE_HOST = '127.0.0.1';

  UDPSock = null;

  CargoIdToLeadWorkerId = {};

  initUDPSock = function() {
    if (UDPSock) {
      return;
    }
    UDPSock = dgram.createSocket({
      type: 'udp4',
      reuseAddr: true
    });
    UDPSock.on('message', function(msg, rinfo) {
      var acknowledagedCargoLeaderId, cargoId, workerId;
      msg = msg.toString('utf8');
      debuglog(`[on msg@${cluster.worker.id}] msg:`, msg, ", rinfo:", rinfo);
      [workerId, cargoId] = msg.toString('utf8').split("@");
      workerId = parseInt(workerId) || 0;
      if (!(workerId > 0 && cargoId)) {
        debuglog(`[sock:message@${cluster.worker.id}] bad msg:${msg} or cargoId:${cargoId}`);
        return;
      }
      acknowledagedCargoLeaderId = parseInt(CargoIdToLeadWorkerId[cargoId]) || 0;
      if (workerId > acknowledagedCargoLeaderId) {
        // make highest cluster.worker.id as the cargo leader
        CargoIdToLeadWorkerId[cargoId] = workerId;
      }
      debuglog(`[on msg@${cluster.worker.id}] CargoIdToLeadWorkerId:`, CargoIdToLeadWorkerId);
    });
    UDPSock.bind(SERVICE_PORT, SERVICE_HOST, function() {
      return UDPSock.setBroadcast(true);
    });
  };

  electSelfToALeader = function(cargoId, callbak = NOOP) {
    var countSend, msg, procSend;
    if (cluster.isMaster && Object.keys(cluster.workers).length === 0) {
      debuglog("[electSelfToALeader] single process leader");
      callbak();
      return;
    }
    initUDPSock();
    msg = Buffer.from(String(cluster.worker.id) + "@" + cargoId);
    // broadcast self for a number of times
    countSend = 0;
    procSend = function() {
      var workerId;
      ++countSend;
      if (countSend < 100) {
        UDPSock.send(msg, 0, msg.length, SERVICE_PORT, SERVICE_HOST);
        setTimeout(procSend, Math.random() * 1000 >>> 0);
      } else {
        workerId = cluster.worker.id;
        if (CargoIdToLeadWorkerId[cargoId] === workerId) {
          debuglog(`[electSelfToALeader@${workerId}] is leader`);
          callbak();
        } else {
          debuglog(`[electSelfToALeader@${workerId}] is follower`);
        }
      }
    };
    procSend();
  };

  module.exports = {
    electSelfToALeader: electSelfToALeader
  };

}).call(this);
